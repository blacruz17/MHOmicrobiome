testDescr, type="prob") # Prediction
ranger.roc <- roc(testClass, ranger.predicted.prob$MU)
ranger.roc
(p.roc.ranger <- ggroc(ranger.roc,
size = 2,
legacy.axes = TRUE, color = "#725DEF") +
labs(x = "False Positive Rate",
y = "True Positive Rate") +
geom_segment(aes(x = 0, xend = 1, y = 0, yend = 1),
color = "black", linetype = "dotted",
linewidth = 2) +
geom_text(aes( x=0.8, y=0.05,
label=paste0("AUC = ",
round(ranger.roc$auc, 2))),
size = 6) +
theme_bw() +
theme(legend.title = element_blank()) +
coord_equal()  +
theme(plot.title = element_text(size = 24, face = "bold"),
axis.title = element_text(size = 24),
legend.title = element_text(size = 24),
axis.text = element_text(size = 20),
legend.position = "none"))
# ROC: Weighted -----
weighted.predicted.prob <- predict(best_models[["Ranger + Weights"]],
testDescr, type="prob") # Prediction
weighted.roc <- roc(testClass, weighted.predicted.prob$MU)
weighted.roc
(p.roc.weighted <- ggroc(weighted.roc,
size = 2,
legacy.axes = TRUE, color = "#725DEF") +
labs(x = "False Positive Rate",
y = "True Positive Rate") +
geom_segment(aes(x = 0, xend = 1, y = 0, yend = 1),
color = "black", linetype = "dotted",
linewidth = 2) +
geom_text(aes( x=0.8, y=0.05,
label=paste0("AUC = ",
round(weighted.roc$auc, 2))),
size = 6) +
theme_bw() +
theme(legend.title = element_blank()) +
coord_equal()  +
theme(plot.title = element_text(size = 24, face = "bold"),
axis.title = element_text(size = 24),
legend.title = element_text(size = 24),
axis.text = element_text(size = 20),
legend.position = "none"))
# Ranger: Up ---------------
ranger.u.predicted.prob <- predict(best_models[["Ranger + Upsampling"]],
testDescr, type="prob") # Prediction
ranger.u.roc <- roc(testClass, ranger.u.predicted.prob$MU)
ranger.u.roc
(p.roc.ranger.u <- ggroc(ranger.u.roc,
size = 2,
legacy.axes = TRUE, color = "#725DEF") +
labs(x = "False Positive Rate",
y = "True Positive Rate") +
geom_segment(aes(x = 0, xend = 1, y = 0, yend = 1),
color = "black", linetype = "dotted",
linewidth = 2) +
geom_text(aes( x=0.8, y=0.05,
label=paste0("AUC = ",
round(ranger.roc$auc, 2))),
size = 6) +
theme_bw() +
theme(legend.title = element_blank()) +
coord_equal()  +
theme(plot.title = element_text(size = 24, face = "bold"),
axis.title = element_text(size = 24),
legend.title = element_text(size = 24),
axis.text = element_text(size = 20),
legend.position = "none"))
# Ranger: Down ---------------
ranger.d.predicted.prob <- predict(best_models[["Ranger + Downsampling"]],
testDescr, type="prob") # Prediction
ranger.d.roc <- roc(testClass, ranger.d.predicted.prob$MU)
ranger.d.roc
(p.roc.ranger.d <- ggroc(ranger.d.roc,
size = 2,
legacy.axes = TRUE, color = "#725DEF") +
labs(x = "False Positive Rate",
y = "True Positive Rate") +
geom_segment(aes(x = 0, xend = 1, y = 0, yend = 1),
color = "black", linetype = "dotted",
linewidth = 2) +
geom_text(aes( x=0.8, y=0.05,
label=paste0("AUC = ",
round(ranger.roc$auc, 2))),
size = 6) +
theme_bw() +
theme(legend.title = element_blank()) +
coord_equal()  +
theme(plot.title = element_text(size = 24, face = "bold"),
axis.title = element_text(size = 24),
legend.title = element_text(size = 24),
axis.text = element_text(size = 20),
legend.position = "none"))
# Join together ------
allROCs <- ggroc(list(
# "Weighted" = weighted.roc,
"Ranger" = ranger.roc,
# "Basic" = result.roc,
"Ranger + Upsampling" = ranger.u.roc,
"Ranger + Downsampling" = ranger.d.roc),
size = 1,
legacy.axes = TRUE) +
labs(x = "False Positive Rate",
y = "True Positive Rate") +
geom_segment(aes(x = 0, xend = 1, y = 0, yend = 1),
color = "black", linetype = "dotted") +
scale_color_manual(values = viridis::viridis(3)) +
theme_bw() +
theme(legend.title = element_blank()) +
coord_equal()  +
theme(plot.title = element_blank(),
axis.title = element_text(size = 12),
legend.title = element_blank(),
legend.text = element_text(size = 10),
axis.text = element_text(size = 10))
allROCs
# Support Vector Machines ----------------------------
## Radial ---------------
svmRadial.prob <- predict(svmRadial, testDescr, type="prob") # Prediction
svmRadial.roc <- roc(testClass, svmRadial.prob$MU)
svmRadial.roc
(p.roc.svmRadial <- ggroc(svmRadial.roc,
size = 2,
legacy.axes = TRUE, color = "#725DEF") +
labs(x = "False Positive Rate",
y = "True Positive Rate") +
geom_segment(aes(x = 0, xend = 1, y = 0, yend = 1),
color = "black", linetype = "dotted",
linewidth = 2) +
geom_text(aes( x=0.8, y=0.05,
label=paste0("AUC = ",
round(svmRadial.roc$auc, 2))),
size = 6) +
theme_bw() +
theme(legend.title = element_blank()) +
coord_equal()  +
theme(plot.title = element_text(size = 24, face = "bold"),
axis.title = element_text(size = 24),
legend.title = element_text(size = 24),
axis.text = element_text(size = 20),
legend.position = "none"))
## Radial Sigma ---------------
svmRadialSigma.prob <- predict(svmRadialSigma, testDescr, type="prob") # Prediction
svmRadialSigma.roc <- roc(testClass, svmRadialSigma.prob$MU)
svmRadialSigma.roc
(p.roc.svmRadialSigma <- ggroc(svmRadialSigma.roc,
size = 2,
legacy.axes = TRUE, color = "#725DEF") +
labs(x = "False Positive Rate",
y = "True Positive Rate") +
geom_segment(aes(x = 0, xend = 1, y = 0, yend = 1),
color = "black", linetype = "dotted",
linewidth = 2) +
geom_text(aes( x=0.8, y=0.05,
label=paste0("AUC = ",
round(svmRadialSigma.roc$auc, 2))),
size = 6) +
theme_bw() +
theme(legend.title = element_blank()) +
coord_equal()  +
theme(plot.title = element_text(size = 24, face = "bold"),
axis.title = element_text(size = 24),
legend.title = element_text(size = 24),
axis.text = element_text(size = 20),
legend.position = "none"))
## Radial Weighted ---------------
svmRadialWeights.prob <- predict(svmRadialWeights, testDescr, type="prob") # Prediction
svmRadialWeights.roc <- roc(testClass, svmRadialWeights.prob$MU)
svmRadialWeights.roc
(p.roc.svmRadialWeights <- ggroc(svmRadialWeights.roc,
size = 2,
legacy.axes = TRUE, color = "#725DEF") +
labs(x = "False Positive Rate",
y = "True Positive Rate") +
geom_segment(aes(x = 0, xend = 1, y = 0, yend = 1),
color = "black", linetype = "dotted",
linewidth = 2) +
geom_text(aes( x=0.8, y=0.05,
label=paste0("AUC = ",
round(svmRadialWeights.roc$auc, 2))),
size = 6) +
theme_bw() +
theme(legend.title = element_blank()) +
coord_equal()  +
theme(plot.title = element_text(size = 24, face = "bold"),
axis.title = element_text(size = 24),
legend.title = element_text(size = 24),
axis.text = element_text(size = 20),
legend.position = "none"))
## Radial Weighted + Upsampling ---------------
svmRadialWeights.u.prob <- predict(svmRadialWeights.u, testDescr, type="prob") # Prediction
svmRadialWeights.u.roc <- roc(testClass, svmRadialWeights.u.prob$MU)
svmRadialWeights.u.roc
(p.roc.svmRadialWeights.u <- ggroc(svmRadialWeights.u.roc,
size = 2,
legacy.axes = TRUE, color = "#725DEF") +
labs(x = "False Positive Rate",
y = "True Positive Rate") +
geom_segment(aes(x = 0, xend = 1, y = 0, yend = 1),
color = "black", linetype = "dotted",
linewidth = 2) +
geom_text(aes( x=0.8, y=0.05,
label=paste0("AUC = ",
round(svmRadialWeights.roc$auc, 2))),
size = 6) +
theme_bw() +
theme(legend.title = element_blank()) +
coord_equal()  +
theme(plot.title = element_text(size = 24, face = "bold"),
axis.title = element_text(size = 24),
legend.title = element_text(size = 24),
axis.text = element_text(size = 20),
legend.position = "none"))
## Radial Weighted + Downsampling ---------------
svmRadialWeights.d.prob <- predict(svmRadialWeights.d, testDescr, type="prob") # Prediction
svmRadialWeights.d.roc <- roc(testClass, svmRadialWeights.d.prob$MU)
svmRadialWeights.d.roc
(p.roc.svmRadialWeights.d <- ggroc(svmRadialWeights.d.roc,
size = 2,
legacy.axes = TRUE, color = "#725DEF") +
labs(x = "False Positive Rate",
y = "True Positive Rate") +
geom_segment(aes(x = 0, xend = 1, y = 0, yend = 1),
color = "black", linetype = "dotted",
linewidth = 2) +
geom_text(aes( x=0.8, y=0.05,
label=paste0("AUC = ",
round(svmRadialWeights.roc$auc, 2))),
size = 6) +
theme_bw() +
theme(legend.title = element_blank()) +
coord_equal()  +
theme(plot.title = element_text(size = 24, face = "bold"),
axis.title = element_text(size = 24),
legend.title = element_text(size = 24),
axis.text = element_text(size = 20),
legend.position = "none"))
## Linear Weighted ---------------
svmLinearWeights.prob <- predict(svmLinearWeights, testDescr, type="prob") # Prediction
svmLinearWeights.roc <- roc(testClass, svmLinearWeights.prob$MU)
svmLinearWeights.roc
(p.roc.svmLinearWeights <- ggroc(svmLinearWeights.roc,
size = 2,
legacy.axes = TRUE, color = "#725DEF") +
labs(x = "False Positive Rate",
y = "True Positive Rate") +
geom_segment(aes(x = 0, xend = 1, y = 0, yend = 1),
color = "black", linetype = "dotted",
linewidth = 2) +
geom_text(aes( x=0.8, y=0.05,
label=paste0("AUC = ",
round(svmLinearWeights.roc$auc, 2))),
size = 6) +
theme_bw() +
theme(legend.title = element_blank()) +
coord_equal()  +
theme(plot.title = element_text(size = 24, face = "bold"),
axis.title = element_text(size = 24),
legend.title = element_text(size = 24),
axis.text = element_text(size = 20),
legend.position = "none"))
# Together --------------------------
allROCs <- ggroc(list(
# "Weighted" = weighted.roc,
"Radial" = svmRadial.roc,
"Radial Sigma" = svmRadialSigma.roc,
"Radial Weighted" = svmRadialWeights.roc,
"Radial Weighted + Upsampling" = svmRadialWeights.u.roc,
"Radial Weighted + Downsampling" = svmRadialWeights.d.roc,
"Linear Weighted" = svmLinearWeights.roc),
size = 1,
legacy.axes = TRUE) +
labs(x = "False Positive Rate",
y = "True Positive Rate") +
geom_segment(aes(x = 0, xend = 1, y = 0, yend = 1),
color = "black", linetype = "dotted") +
scale_color_manual(values = viridis::viridis(6)) +
theme_bw() +
theme(legend.title = element_blank()) +
coord_equal()  +
theme(plot.title = element_blank(),
axis.title = element_text(size = 12),
legend.title = element_blank(),
legend.text = element_text(size = 10),
axis.text = element_text(size = 10))
allROCs
# XGBoost -------------------------------
data_test <- testDescr
data_test$MetHealth <- testClass
xgb_prep <- recipe(MetHealth ~ ., data = data_test) %>%
step_integer(all_nominal()) %>%
prep(training = data_test, retain = TRUE) %>%
juice()
X_t <- as.matrix(xgb_prep[setdiff(names(xgb_prep), "MetHealth")])
Y_t <- xgb_prep$MetHealth
Y_t[Y_t == 1] <- 0 # 0 = MH
Y_t[Y_t == 2] <- 1 # 1 = MU
predicted.prob.xgb <- predict(xgboost,
X_t, type="prob") # Prediction
roc.xgb <- roc(Y_t, predicted.prob.xgb)
roc.xgb
(p.roc.xgb <- ggroc(roc.xgb,
size = 2,
legacy.axes = TRUE, color = "#725DEF") +
labs(x = "False Positive Rate",
y = "True Positive Rate") +
geom_segment(aes(x = 0, xend = 1, y = 0, yend = 1),
color = "black", linetype = "dotted",
linewidth = 2) +
geom_text(aes( x=0.8, y=0.05,
label=paste0("AUC = ",
round(roc.xgb$auc, 2))),
size = 6) +
theme_bw() +
theme(legend.title = element_blank()) +
coord_equal()  +
theme(plot.title = element_text(size = 24, face = "bold"),
axis.title = element_text(size = 24),
legend.title = element_text(size = 24),
axis.text = element_text(size = 20),
legend.position = "none"))
# Figura final  -----------------------------
roclist <- list(
"Random Forest" = ranger.roc,
"Support Vector Machine" = svmRadialWeights.roc,
"Gradient Boosting" = roc.xgb)
names(roclist) <- c(
paste0(names(roclist)[1], ", AUC = ", round(ranger.roc$auc, 2)),
paste0(names(roclist)[2], ", AUC = ", round(svmRadialWeights.roc$auc, 2)),
paste0(names(roclist)[3], ", AUC = ", round(roc.xgb$auc, 2))
)
roclist.2 <- list(roclist[[2]], roclist[[1]], roclist[[3]])
names(roclist.2) <- c(names(roclist)[2], names(roclist)[1], names(roclist)[3])
# Save ROC list for future:
saveRDS(roclist.2, "./binaryROC_20250212.RDS")
allROCs <- ggroc(roclist.2,
# size = 1.5,
legacy.axes = TRUE) +
labs(x = "False Positive Rate",
y = "True Positive Rate") +
geom_segment(aes(x = 0, xend = 1, y = 0, yend = 1),
color = "black", linetype = "dotted",
# linewidth = 1
) +
scale_color_manual(values = viridis::viridis(length(roclist.2))) +
theme_bw() +
coord_equal()  +
theme(plot.title = element_blank(),
axis.title = element_text(size = 10),
axis.text = element_text(size = 8),
legend.title = element_blank(),
legend.text = element_text(size = 7),
legend.position = "bottom",
legend.direction = "vertical",
legend.key = element_rect(linewidth = .1, color = "white"),
legend.key.size = unit(1, "lines"))
allROCs
getwd()
library(caret)
library(tidyverse)
library(doParallel)
library(xgboost)
library(recipes)
rm(list = ls())
# Loading data ----
library(phyloseq)
physeq <- read_rds("./adj_physeq_MMUPHIN_mpa30_20240911.rds")
physeq <- microbiome::transform(physeq, "clr")
set.seed(505)
## relative abundances table:
data.RF <- data.frame(t(physeq@otu_table))
colnames(data.RF) <- data.frame(physeq@tax_table)$Species
# Labels:
class.RF <- data.frame(physeq@sam_data) %>%
select(MetObesity) %>%
rename(class = MetObesity)
class.RF <- data.frame("class" = class.RF[rownames(data.RF), ])
rownames(class.RF) <- rownames(data.RF)
## classes for binary predictor:
class.RF$class.binary <- gsub('O|NO', '', class.RF$class)
class.binary <- factor(class.RF$class.binary)
# Binary classifier -----------------------------------------------------------
# start parallel processing
# cl <- makePSOCKcluster(40)
# registerDoParallel(cl)
## Train/Test split ----
# creates split based on the class labels
inTrain <- createDataPartition(class.binary,
p = 3/4, list = FALSE)
# selects the corresponding samples:
trainDescr <- readRDS("./trainDescr_basicBinary_ranger.rds")
testDescr <- readRDS("./testDescr_basicBinary_ranger.rds")
trainClass <- readRDS("./trainClass_basicBinary_ranger.rds")
testClass <- readRDS("./testClass_basicBinary_ranger.rds")
# these should be TRUE:
dim(trainDescr)[1] == length(trainClass)
dim(testDescr)[1] == length(testClass)
# OK!
## Model training --------------------------------------------------------------
# Running an XGBoost model with xgboost requires some additional data preparation.
# xgboost requires a matrix input for the features and the response to be a vector.
# Consequently, to provide a matrix input of the features we need to encode our
# categorical variables numerically (i.e. one-hot encoding, label encoding).
# The following numerically label encodes all categorical features and converts
# the training data frame to a matrix.
data_train <- trainDescr
data_train$MetHealth <- trainClass
xgb_prep <- recipe(MetHealth ~ ., data = data_train) %>%
step_integer(all_nominal()) %>%
prep(training = data_train, retain = TRUE) %>%
juice()
X <- as.matrix(xgb_prep[setdiff(names(xgb_prep), "MetHealth")])
Y <- xgb_prep$MetHealth
Y[Y == 2] <- 0
# hyperparameter grid
hyper_grid <- readRDS("./hyper_grid_XGB_20250207.RDS")
getwd()
# hyperparameter grid
hyper_grid <- readRDS("./hyper_grid_XGB_Reg_20250207.RDS")
# results
hyper_grid %>%
filter(rmse > 0) %>%
arrange(rmse) %>%
glimpse()
# NOTA: por un error, en realidad la columna "rmse" se refiere al logloss.
# los mejores valores son:
bestval <- hyper_grid %>%
filter(rmse > 0) %>%
arrange(rmse) %>%
slice_head(n = 1)
hyper_grid
ead(hyper_grid)
head(hyper_grid)
# NOTA: por un error, en realidad la columna "rmse" se refiere al logloss.
# los mejores valores son:
bestval <- hyper_grid %>%
filter(logloss > 0) %>%
arrange(logloss) %>%
slice_head(n = 1)
params <- list(
eta = bestval$eta,
max_depth = bestval$max_depth,
min_child_weight = bestval$min_child_weight,
subsample = bestval$subsample,
colsample_bytree = bestval$colsample_bytree,
gamma = bestval$gamma,
lambda = bestval$lambda,
alpha = bestval$alpha
)
# train final model
set.seed(123)
xgb.fit.final <- xgboost(
params = params,
data = X,
label = Y,
nrounds = bestval$trees,
objective = "binary:logistic",
verbose = 1
)
# Test -----
data_test <- testDescr
data_test$MetHealth <- testClass
xgb_prep <- recipe(MetHealth ~ ., data = data_test) %>%
step_integer(all_nominal()) %>%
prep(training = data_test, retain = TRUE) %>%
juice()
X_t <- as.matrix(xgb_prep[setdiff(names(xgb_prep), "MetHealth")])
Y_t <- xgb_prep$MetHealth
Y_t[Y_t == 1] <- 0 # 0 = MH
Y_t[Y_t == 2] <- 1 # 1 = MU
predicted.prob <- predict(xgb.fit.final,
X_t, type="prob") # Prediction
roc <- roc(Y_t, predicted.prob)
roc
(p.roc <- ggroc(roc,
size = 2,
legacy.axes = TRUE, color = "#725DEF") +
labs(x = "False Positive Rate",
y = "True Positive Rate") +
geom_segment(aes(x = 0, xend = 1, y = 0, yend = 1),
color = "black", linetype = "dotted",
linewidth = 2) +
geom_text(aes( x=0.8, y=0.05,
label=paste0("AUC = ",
round(roc$auc, 2))),
size = 6) +
theme_bw() +
theme(legend.title = element_blank()) +
coord_equal()  +
theme(plot.title = element_text(size = 24, face = "bold"),
axis.title = element_text(size = 24),
legend.title = element_text(size = 24),
axis.text = element_text(size = 20),
legend.position = "none"))
knit::purl("analisis_mmuphin_mpa3_20240829.Rmd")
knitr::purl("analisis_mmuphin_mpa3_20240829.Rmd")
getwd()
cd("../../..")
setwd("../../..")
getwd()
setwd("C:/Users/blancalacruz/OneDrive - FUNDACION IMDEA-ALIMENTACION/Escritorio/AI4Food/mho/ecoMHO/1_preprocessing")
knitr::purl("analisis_mmuphin_mpa3_20240829.Rmd")
setwd("C:/Users/blancalacruz/OneDrive - FUNDACION IMDEA-ALIMENTACION/Escritorio/AI4Food/mho/ecoMHO/2_exploratoryAnalyses")
list.files()
knitr::purl("figuraAntropoBqPosterEFFoST_importingData_TNFa_PostHocDunnTest_20250225.Rmd")
knitr::purl("diversityFigurasPvalues_20250116.Rmd")
q()
